name: Build surfer2 CLI for Windows

env:
  GMP_VERSION: 6.3.0
  MPFR_VERSION: 4.2.1
  BOOST_VERSION: 1.83.0
  CGAL_VERSION: 5.6.2

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-windows:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository along with its submodules
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install MinGW-w64 and basic building tools
      - name: Install MinGW-w64 and dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y mingw-w64 cmake build-essential wget unzip

      # Cache the MinGW sysroot to speed up subsequent runs
      - name: Cache MinGW sysroot
        id: cache-mingw
        uses: actions/cache@v4
        with:
          path: /usr/x86_64-w64-mingw32
          key: ${{ runner.os }}-mingw-boost-${{ env.BOOST_VERSION }}-cgal-${{ env.CGAL_VERSION }}

      # Install GMP only if the cache is missed
      - name: Install GMP
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          wget --quiet https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VERSION}.tar.xz
          tar -xf gmp-${GMP_VERSION}.tar.xz
          cd gmp-${GMP_VERSION}
          ./configure --host=x86_64-w64-mingw32 \
                      --prefix=/usr/x86_64-w64-mingw32 \
                      --enable-cxx \
                      --disable-shared --enable-static
          make -j$(nproc) V=0
          sudo make install
          cd ..
          sudo rm -rf gmp-${GMP_VERSION} gmp-${GMP_VERSION}.tar.xz

      # Install MPFR only if the cache is missed
      - name: Install MPFR
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          ls /usr/x86_64-w64-mingw32/include/gmp.h || exit 1
          ls /usr/x86_64-w64-mingw32/lib/libgmp.a || exit 1
          ls /usr/x86_64-w64-mingw32/lib/libgmpxx.a || exit 1
          wget --quiet https://ftp.gnu.org/gnu/mpfr/mpfr-${MPFR_VERSION}.tar.xz
          tar -xf mpfr-${MPFR_VERSION}.tar.xz
          cd mpfr-${MPFR_VERSION}
          ./configure --host=x86_64-w64-mingw32 \
                      --prefix=/usr/x86_64-w64-mingw32 \
                      --with-gmp=/usr/x86_64-w64-mingw32 \
                      --disable-shared --enable-static
          make -j$(nproc) V=0
          sudo make install
          cd ..
          sudo rm -rf mpfr-${MPFR_VERSION} mpfr-${MPFR_VERSION}.tar.xz

      # Create a CMake toolchain file for MinGW cross-compilation
      - name: Create CMake toolchain file
        run: |
          cat <<EOF > mingw-toolchain.cmake
          set(CMAKE_SYSTEM_NAME Windows)
          set(CMAKE_SYSTEM_PROCESSOR x86_64)
          set(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)
          set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)
          set(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)
          set(CMAKE_FIND_ROOT_PATH /usr/x86_64-w64-mingw32)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF

      # Install Boost only if the cache is missed
      - name: Install Boost
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          # Note: The Boost archive uses underscores instead of dots.
          BOOST_ARCHIVE=boost_${BOOST_VERSION//./_}
          wget --quiet https://archives.boost.io/release/${BOOST_VERSION}/source/${BOOST_ARCHIVE}.tar.gz
          tar -xzf ${BOOST_ARCHIVE}.tar.gz
          cd ${BOOST_ARCHIVE}
          echo "using gcc : : x86_64-w64-mingw32-g++ : <cxxflags>-pthread <linkflags>-pthread ;" > user-config.jam
          ./bootstrap.sh
          sudo ./b2 --user-config=user-config.jam \
                    --prefix=/usr/x86_64-w64-mingw32 \
                    toolset=gcc \
                    target-os=windows \
                    address-model=64 \
                    variant=release \
                    threading=multi \
                    --with-graph \
                    --with-iostreams \
                    -d0 \
                    install
          cd ..
          sudo rm -rf ${BOOST_ARCHIVE} ${BOOST_ARCHIVE}.tar.gz

      # Install CGAL only if the cache is missed
      - name: Install CGAL
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          wget --quiet https://github.com/CGAL/cgal/releases/download/v${CGAL_VERSION}/CGAL-${CGAL_VERSION}.tar.xz
          tar -xf CGAL-${CGAL_VERSION}.tar.xz
          cd CGAL-${CGAL_VERSION}
          mkdir build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../../mingw-toolchain.cmake \
                   -DCMAKE_INSTALL_PREFIX=/usr/x86_64-w64-mingw32
          make -j$(nproc) V=0
          sudo make install
          cd ../..
          sudo rm -rf CGAL-${CGAL_VERSION} CGAL-${CGAL_VERSION}.tar.xz

      # Configure and build the surfer2 CLI (this step displays its normal log output)
      - name: Build surfer2 CLI
        run: |
          mkdir build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../mingw-toolchain.cmake \
                   -DCMAKE_BUILD_TYPE=Release \
                   -DBOOST_ROOT=/usr/x86_64-w64-mingw32 \
                   -DCGAL_DIR=/usr/x86_64-w64-mingw32/lib/CGAL \
                   -DBUILD_CLI=ON \
                   -DCMAKE_BUILD_TYPE=Debug
          make -j$(nproc) surfer

      - name: Build surfer2 CLI (Debug, Double=ON)
        run: |
          BUILD_DIR="build-Debug-ON"
          mkdir $BUILD_DIR && cd $BUILD_DIR
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../mingw-toolchain.cmake \
                   -DCMAKE_INSTALL_PREFIX=/usr/x86_64-w64-mingw32 \
                   -DBOOST_ROOT=/usr/x86_64-w64-mingw32 \
                   -DCGAL_DIR=/usr/x86_64-w64-mingw32/lib/CGAL \
                   -DBUILD_CLI=ON \
                   -DCMAKE_BUILD_TYPE=Debug \
                   -DNT_USE_DOUBLE=ON
          make -j$(nproc) surfer VERBOSE=1
          cd ..

      - name: Package artifact (Debug, Double=ON)
        run: |
          ARTIFACT_NAME="surfer2-windows-cli-Debug-double_ON"
          PACKAGE_DIR="${{ env.ARTIFACT_STAGE_DIR }}/$ARTIFACT_NAME" # Use staging dir
          BUILD_DIR="build-Debug-ON"
          mkdir -p $PACKAGE_DIR
          cp $BUILD_DIR/cc/surfer.exe $PACKAGE_DIR/
          # Copy DLLs (simplified error handling for brevity)
          find /usr/lib/gcc/x86_64-w64-mingw32 -name 'libgcc_s_seh-1.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libgcc_s_seh-1.dll not found"
          find /usr/lib/gcc/x86_64-w64-mingw32 -name 'libstdc++-6.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libstdc++-6.dll not found"
          find /usr/x86_64-w64-mingw32/bin -name 'libwinpthread-1.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libwinpthread-1.dll not found"

      - name: Upload artifact (Debug, Double=ON) # <-- INDIVIDUAL UPLOAD
        uses: actions/upload-artifact@v4
        with:
          name: surfer2-windows-cli-Debug-double_ON # Unique artifact name
          path: ${{ env.ARTIFACT_STAGE_DIR }}/surfer2-windows-cli-Debug-double_ON # Path to this variant's files
          if-no-files-found: error

      # ==============================================================
      # == Build & Upload Variant 2: Debug, Double=OFF             ==
      # ==============================================================
      - name: Build surfer2 CLI (Debug, Double=OFF)
        run: |
          BUILD_DIR="build-Debug-OFF"
          mkdir $BUILD_DIR && cd $BUILD_DIR
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../mingw-toolchain.cmake -DCMAKE_INSTALL_PREFIX=/usr/x86_64-w64-mingw32 -DBOOST_ROOT=/usr/x86_64-w64-mingw32 -DCGAL_DIR=/usr/x86_64-w64-mingw32/lib/CGAL -DBUILD_CLI=ON -DCMAKE_BUILD_TYPE=Debug -DNT_USE_DOUBLE=OFF
          make -j$(nproc) surfer VERBOSE=1
          cd ..

      - name: Package artifact (Debug, Double=OFF)
        run: |
          ARTIFACT_NAME="surfer2-windows-cli-Debug-double_OFF"
          PACKAGE_DIR="${{ env.ARTIFACT_STAGE_DIR }}/$ARTIFACT_NAME"
          BUILD_DIR="build-Debug-OFF"
          mkdir -p $PACKAGE_DIR
          cp $BUILD_DIR/cc/surfer.exe $PACKAGE_DIR/
          find /usr/lib/gcc/x86_64-w64-mingw32 -name 'libgcc_s_seh-1.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libgcc_s_seh-1.dll not found"
          find /usr/lib/gcc/x86_64-w64-mingw32 -name 'libstdc++-6.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libstdc++-6.dll not found"
          find /usr/x86_64-w64-mingw32/bin -name 'libwinpthread-1.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libwinpthread-1.dll not found"

      - name: Upload artifact (Debug, Double=OFF) # <-- INDIVIDUAL UPLOAD
        uses: actions/upload-artifact@v4
        with:
          name: surfer2-windows-cli-Debug-double_OFF
          path: ${{ env.ARTIFACT_STAGE_DIR }}/surfer2-windows-cli-Debug-double_OFF
          if-no-files-found: error

      # ==============================================================
      # == Build & Upload Variant 3: Release, Double=ON            ==
      # ==============================================================
      - name: Build surfer2 CLI (Release, Double=ON)
        run: |
          BUILD_DIR="build-Release-ON"
          mkdir $BUILD_DIR && cd $BUILD_DIR
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../mingw-toolchain.cmake -DCMAKE_INSTALL_PREFIX=/usr/x86_64-w64-mingw32 -DBOOST_ROOT=/usr/x86_64-w64-mingw32 -DCGAL_DIR=/usr/x86_64-w64-mingw32/lib/CGAL -DBUILD_CLI=ON -DCMAKE_BUILD_TYPE=Release -DNT_USE_DOUBLE=ON
          make -j$(nproc) surfer VERBOSE=1
          cd ..

      - name: Package artifact (Release, Double=ON)
        run: |
          ARTIFACT_NAME="surfer2-windows-cli-Release-double_ON"
          PACKAGE_DIR="${{ env.ARTIFACT_STAGE_DIR }}/$ARTIFACT_NAME"
          BUILD_DIR="build-Release-ON"
          mkdir -p $PACKAGE_DIR
          cp $BUILD_DIR/cc/surfer.exe $PACKAGE_DIR/
          find /usr/lib/gcc/x86_64-w64-mingw32 -name 'libgcc_s_seh-1.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libgcc_s_seh-1.dll not found"
          find /usr/lib/gcc/x86_64-w64-mingw32 -name 'libstdc++-6.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libstdc++-6.dll not found"
          find /usr/x86_64-w64-mingw32/bin -name 'libwinpthread-1.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libwinpthread-1.dll not found"

      - name: Upload artifact (Release, Double=ON) # <-- INDIVIDUAL UPLOAD
        uses: actions/upload-artifact@v4
        with:
          name: surfer2-windows-cli-Release-double_ON
          path: ${{ env.ARTIFACT_STAGE_DIR }}/surfer2-windows-cli-Release-double_ON
          if-no-files-found: error

      # ==============================================================
      # == Build & Upload Variant 4: Release, Double=OFF           ==
      # ==============================================================
      - name: Build surfer2 CLI (Release, Double=OFF)
        run: |
          BUILD_DIR="build-Release-OFF"
          mkdir $BUILD_DIR && cd $BUILD_DIR
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../mingw-toolchain.cmake -DCMAKE_INSTALL_PREFIX=/usr/x86_64-w64-mingw32 -DBOOST_ROOT=/usr/x86_64-w64-mingw32 -DCGAL_DIR=/usr/x86_64-w64-mingw32/lib/CGAL -DBUILD_CLI=ON -DCMAKE_BUILD_TYPE=Release -DNT_USE_DOUBLE=OFF
          make -j$(nproc) surfer VERBOSE=1
          cd ..

      - name: Package artifact (Release, Double=OFF)
        run: |
          ARTIFACT_NAME="surfer2-windows-cli-Release-double_OFF"
          PACKAGE_DIR="${{ env.ARTIFACT_STAGE_DIR }}/$ARTIFACT_NAME"
          BUILD_DIR="build-Release-OFF"
          mkdir -p $PACKAGE_DIR
          cp $BUILD_DIR/cc/surfer.exe $PACKAGE_DIR/
          find /usr/lib/gcc/x86_64-w64-mingw32 -name 'libgcc_s_seh-1.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libgcc_s_seh-1.dll not found"
          find /usr/lib/gcc/x86_64-w64-mingw32 -name 'libstdc++-6.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libstdc++-6.dll not found"
          find /usr/x86_64-w64-mingw32/bin -name 'libwinpthread-1.dll' -exec cp {} $PACKAGE_DIR/ \; || echo "Warning: libwinpthread-1.dll not found"

      - name: Upload artifact (Release, Double=OFF) # <-- INDIVIDUAL UPLOAD
        uses: actions/upload-artifact@v4
        with:
          name: surfer2-windows-cli-Release-double_OFF
          path: ${{ env.ARTIFACT_STAGE_DIR }}/surfer2-windows-cli-Release-double_OFF
          if-no-files-found: error
