name: Build surfer2 w/ GUI for Windows

env:
  GMP_VERSION: 6.3.0
  MPFR_VERSION: 4.2.1
  BOOST_VERSION: 1.83.0
  CGAL_VERSION: 5.6.1

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-windows:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository with its submodules
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install build dependencies
      - name: Install build dependencies
        run: |
          sudo apt-get -qq update
          # Install all dependencies in one command, ensuring backslashes are correct
          # and removing comments from within the command list
          sudo apt-get install -y --no-install-recommends \
            mingw-w64 \
            cmake \
            build-essential \
            wget \
            unzip \
            gettext \
            libgdk-pixbuf2.0-bin \
            gperf \
            intltool \
            libtool \
            libtool-bin \
            lzip \
            python3-mako \
            pkg-config \
            autoconf \
            automake
          echo "+++ Verifying installed tools..."
          which autopoint || (echo "ERROR: autopoint not found!" && exit 1)
          which libtool || (echo "ERROR: libtool not found!" && exit 1)
          echo "+++ Tool verification successful."

      # Cache the MinGW sysroot (from the non‑MXE installs, if any)
      - name: Cache MinGW sysroot
        id: cache-mingw
        uses: actions/cache@v4
        with:
          path: /usr/x86_64-w64-mingw32
          key: ${{ runner.os }}-mingw-boost-${{ env.BOOST_VERSION }}-cgal-${{ env.CGAL_VERSION }}

      # Install GMP if not cached
      - name: Install GMP
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          wget --quiet https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VERSION}.tar.xz
          tar -xf gmp-${GMP_VERSION}.tar.xz
          cd gmp-${GMP_VERSION}
          ./configure --host=x86_64-w64-mingw32 \
                      --prefix=/usr/x86_64-w64-mingw32 \
                      --enable-cxx \
                      --disable-shared --enable-static
          make -j$(nproc) V=0
          sudo make install
          cd ..
          sudo rm -rf gmp-${GMP_VERSION} gmp-${GMP_VERSION}.tar.xz

      # Install MPFR if not cached
      - name: Install MPFR
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          ls /usr/x86_64-w64-mingw32/include/gmp.h || exit 1
          ls /usr/x86_64-w64-mingw32/lib/libgmp.a || exit 1
          ls /usr/x86_64-w64-mingw32/lib/libgmpxx.a || exit 1
          wget --quiet https://ftp.gnu.org/gnu/mpfr/mpfr-${MPFR_VERSION}.tar.xz
          tar -xf mpfr-${MPFR_VERSION}.tar.xz
          cd mpfr-${MPFR_VERSION}
          ./configure --host=x86_64-w64-mingw32 \
                      --prefix=/usr/x86_64-w64-mingw32 \
                      --with-gmp=/usr/x86_64-w64-mingw32 \
                      --disable-shared --enable-static
          make -j$(nproc) V=0
          sudo make install
          cd ..
          sudo rm -rf mpfr-${MPFR_VERSION} mpfr-${MPFR_VERSION}.tar.xz

      # Install Boost if not cached
      - name: Install Boost
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          # Note: The Boost archive uses underscores instead of dots.
          BOOST_ARCHIVE=boost_${BOOST_VERSION//./_}
          wget --quiet https://archives.boost.io/release/${BOOST_VERSION}/source/${BOOST_ARCHIVE}.tar.gz
          tar -xzf ${BOOST_ARCHIVE}.tar.gz
          cd ${BOOST_ARCHIVE}
          echo "using gcc : : x86_64-w64-mingw32-g++ : <cxxflags>-pthread <linkflags>-pthread ;" > user-config.jam
          ./bootstrap.sh
          sudo ./b2 --user-config=user-config.jam \
                    --prefix=/usr/x86_64-w64-mingw32 \
                    toolset=gcc \
                    target-os=windows \
                    address-model=64 \
                    variant=release \
                    threading=multi \
                    --with-graph \
                    --with-iostreams \
                    -d0 \
                    install
          cd ..
          sudo rm -rf ${BOOST_ARCHIVE} ${BOOST_ARCHIVE}.tar.gz

      # ---------------------------------------------------------------------------
      # New step: Build Windows Qt (qtbase) using MXE.
      # This step clones MXE and builds the qtbase package.
      # ---------------------------------------------------------------------------
      - name: Build Windows Qt using MXE
        run: |
          git clone https://github.com/mxe/mxe.git
          cd mxe
          # Build qtbase (essential Windows Qt libraries needed for surfgui)
          make qtbase -j$(nproc)
          cd ..

      # ---------------------------------------------------------------------------
      # Install CGAL using MXE’s toolchain.
      # (Re-order this step so that the MXE toolchain file is available.)
      # ---------------------------------------------------------------------------
      - name: Install CGAL
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          wget --quiet https://github.com/CGAL/cgal/releases/download/v${CGAL_VERSION}/CGAL-${CGAL_VERSION}.tar.xz
          tar -xf CGAL-${CGAL_VERSION}.tar.xz
          cd CGAL-${CGAL_VERSION}
          mkdir build && cd build
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/mxe/usr/x86_64-w64-mingw32.static/share/cmake/mxe-conf.cmake \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/mxe/usr/x86_64-w64-mingw32.static
          make -j$(nproc) V=0
          sudo make install
          cd ../..
          sudo rm -rf CGAL-${CGAL_VERSION} CGAL-${CGAL_VERSION}.tar.xz

      # ---------------------------------------------------------------------------
      # Configure and build all subdirectories (CLI, GUI, and surf) for Windows.
      # We use MXE's CMake toolchain file so that cross‑compiled libraries (including Qt)
      # are found properly.
      # ---------------------------------------------------------------------------
      - name: Build surfer2 for Windows
        run: |
          mkdir build && cd build
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/mxe/usr/x86_64-w64-mingw32.static/share/cmake/mxe-conf.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DBOOST_ROOT=/usr/x86_64-w64-mingw32 \
            -DCGAL_DIR=${{ github.workspace }}/mxe/usr/x86_64-w64-mingw32.static/lib/CGAL
          # Build all targets (CLI, GUI, surf)
          make -j$(nproc)

      # Package the built executables along with required DLLs.
      - name: Package artifacts and log DLL locations
        run: |
          mkdir artifact_dir
          # Copy the CLI executable (assuming its output is in build/cc)
          cp build/cc/surfer.exe artifact_dir/ || echo "CLI target not found!"
          # Copy the GUI executable (assuming its output is in build/gui)
          cp build/gui/surfgui.exe artifact_dir/ || echo "GUI target not found!"
          
          # Locate and copy required DLLs
          DLL_GCC=$(find /usr -type f -name 'libgcc_s_seh-1.dll' | head -n 1)
          [ -z "$DLL_GCC" ] && { echo "Error: libgcc_s_seh-1.dll not found!" && exit 1; } || { echo "Found libgcc_s_seh-1.dll"; cp "$DLL_GCC" artifact_dir/; }
          
          DLL_STDCXX=$(find /usr -type f -name 'libstdc++-6.dll' | head -n 1)
          [ -z "$DLL_STDCXX" ] && { echo "Error: libstdc++-6.dll not found!" && exit 1; } || { echo "Found libstdc++-6.dll"; cp "$DLL_STDCXX" artifact_dir/; }
          
          DLL_WINPTHREAD=$(find /usr -type f -name 'libwinpthread-1.dll' | head -n 1)
          if [ -n "$DLL_WINPTHREAD" ]; then
            echo "Found libwinpthread-1.dll"
            cp "$DLL_WINPTHREAD" artifact_dir/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: surfer2-windows
          path: artifact_dir
